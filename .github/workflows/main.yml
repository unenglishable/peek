name: CI/CD workflow

on:
  push:
  pull_request:
    types: [opened]
    branches:
      - main

jobs:
  dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7
      - name: Checkout
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ steps.branch-name.outputs.default_branch }}
      - name: Parse .tool-versions
        id: tool-versions
        uses: paulo-ferraz-oliveira/parse-tool-versions@v1
      - name: Sets up an Erlang/OTP environment
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
      - name: Retrieve cached dependencies
        uses: actions/cache@v3.3.1
        id: mix-cache
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-${{ hashFiles('mix.lock') }}
      - name: Install dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
          mix deps.compile
  static-code-analysis:
    needs: dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ steps.branch-name.outputs.default_branch }}
      - name: Parse .tool-versions
        id: tool-versions
        uses: paulo-ferraz-oliveira/parse-tool-versions@v1
      - name: Sets up an Erlang/OTP environment
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
      - name: Retrieve cached dependencies
        uses: actions/cache@v3.0.11
        id: mix-cache
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-${{ hashFiles('mix.lock') }}
      - run: mix format --check-formatted
      - run: mix credo
      # PLT cache for dialyzer
      # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
      # Cache key based on Elixir & Erlang version (also useful when running in matrix)
      - name: Restore PLT cache
        uses: actions/cache/restore@v3
        id: plt_cache
        with:
          key: |
            ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-plt
          restore-keys: |
            ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-plt
          path: |
            priv/plts
      # Create PLTs if no cache was found
      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt
      # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
      # so we separate the cache restore and save steps in case running dialyzer fails.
      - name: Save PLT cache
        uses: actions/cache/save@v3
        if: steps.plt_cache.outputs.cache-hit != 'true'
        id: plt_cache_save
        with:
          key: |
            ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-plt
          path: |
            priv/plts
      - name: Run dialyzer
        run: mix dialyzer --format github
